#BlueJ class context
comment0.target=BinaryTree
comment0.text=\r\n\r\nThe\ BinaryTree\ Class\r\n\r\n@author\ Autumn\ C.\ Spaulding\ <a\ href\="mailto\:autumn@max.cs.kzoo.edu">email</a>\r\nCreation\ Date\:\ 24\ July\ 2000\r\n\r\nModifications\:\r\nModifier\:\ Alyce\ Brady\r\nModification\ Date\:\ November\ 11,\ 2002\r\nModifications\ Made\:\ Modifications\ to\ documentation\ (e.g.,\ to\ remove\r\nempty\ preconditions);\ added\ levelOrderTraversal;\r\nalso\ modified\ to\ use\ NodeAction\ interface.\r\nModifier\:\ Nathan\ Sprague\r\nModification\ Date\:\ May\ 10,\ 2010\r\nModifications\ Made\:\ Modified\ to\ use\ Java\ Queue\ interface.\r\n\r\nModifications\:\r\nModifier\:\ Caroline\ Lamb\r\nModification\ Date\:\ 11/13/2021\r\nModifications\ Made\:\r\n\r\nDescription\:\r\nThis\ file\ contains\ some\ of\ the\ implementation\ of\ a\ BinaryTree\ class.\ \r\nIt\ is\ intended\ as\ an\ outline\ and\ starting\ point\ for\ the\ "Binary\ Trees"\r\nlab\ in\ the\ Data\ Structures\ course.\ \ The\ implementation\ is\ based\ on\ the\ \r\nrecursive\ definition\ of\ a\ tree\ rather\ than\ on\ the\ graph\ theory\ definition\r\nof\ a\ tree\ (compare\ to\ Bailey,\ 190).\r\n\r\nA\ binary\ tree\ is\ either\:\r\n1.\ \ An\ empty\ tree;\ or\r\n2.\ \ a\ node,\ called\ a\ root\ (the\ node\ contains\ the\ data),\ and\ two\ \r\nchildren,\ left\ and\ right,\ each\ of\ which\ are\ themselves\ binary\ trees.\r\n(Berman,\ "Data\ Structures\ via\ C++\:\ Objects\ by\ Evolution",\ 1997.)\r\n\r\nIn\ this\ implementation,\ an\ empty\ tree\ is\ represented\ by\ a\ node\ with\ null\r\ndata\ and\ null\ references\ for\ the\ children.\ \ A\ leaf\ node\ is\ represented\ by\r\na\ node\ with\ a\ data\ value\ and\ two\ references\ to\ empty\ trees\ (NOT\ a\ data\r\nvalue\ and\ two\ null\ references\!).\ \ We\ could\ represent\ this\ as\ an\ object\r\ninvariant\:\ data,\ left,\ right\ are\ either\ all\ null\ (representing\ an\ empty\r\ntree)\ or\ none\ of\ them\ are\ null\ (a\ non-empty\ tree).\r\n\r\n
comment1.params=
comment1.target=BinaryTree()
comment1.text=Creates\ an\ empty\ binary\ tree\ with\ no\ data\ and\ no\ children.
comment10.params=action
comment10.target=void\ postOrderTraversal(NodeVisitor)
comment10.text=\ Traverses\ the\ tree\ in\ post-order.\r\n\ \ \ \ @param\ action\ an\ object\ that\ will\ act\ on\ all\ the\ nodes\ in\ the\ tree\r\n
comment11.params=
comment11.target=boolean\ isLeaf()
comment11.text=\ Checks\ whether\ this\ node\ is\ a\ leaf\ node.\r\n\ \ \ \ @return\ true\ if\ it\ is\ a\ leaf,\ otherwise\ false\r\n
comment12.params=
comment12.target=int\ numNodes()
comment12.text=\ Counts\ the\ number\ of\ nodes\ in\ the\ tree\r\n\ \ \ \ @return\ number\ of\ nodes\ in\ the\ tree\r\n
comment13.params=
comment13.target=int\ numLeaves()
comment13.text=\ Counts\ the\ number\ of\ leaves\ in\ the\ tree\r\n\ \ \ \ @return\ number\ of\ leaves\ in\ the\ tree.\ \ \r\n
comment14.params=
comment14.target=int\ depth()
comment14.text=\ Gets\ the\ depth\ of\ the\ tree.\ \r\n\ \ \ \ @return\ depth\ of\ the\ tree.\ \ \r\n
comment15.params=item
comment15.target=boolean\ contains(java.lang.Object)
comment15.text=\ Searches\ for\ a\ specific\ item\ in\ the\ tree.\ \r\n\ \ \ \ @param\ \ \ \ \ \ the\ item\ to\ search\ for\r\n\ \ \ \ @return\ \ \ \ \ true\ if\ it\ contains\ the\ item,\ otherwise\ false.\ \r\n
comment16.params=item
comment16.target=int\ numOccurances(java.lang.Object)
comment16.text=\ Calculates\ the\ number\ of\ times\ an\ item\ occurs\ in\ the\ tree.\ \r\n\ \ \ \ @param\ \ the\ item\ to\ search\ for\r\n\ \ \ \ @return\ the\ number\ of\ times\ the\ item\ occurs\r\n
comment2.params=
comment2.target=boolean\ isEmpty()
comment2.text=\ Tests\ whether\ this\ is\ an\ empty\ tree.\r\n\ \ \ \ @return\ true\ if\ the\ tree\ is\ empty;\ false\ otherwise\r\n
comment3.params=
comment3.target=java.lang.Object\ getElement()
comment3.text=\ Gets\ the\ data\ associated\ with\ the\ root\ node\ of\ this\ particular\ tree\r\n\ \ \ \ (recall\ recursive\ definition\ of\ trees).\r\n\ \ \ \ @return\ value\ associated\ with\ tree's\ root\ node;\ \r\n\ \ \ \ null\ if\ tree\ is\ empty\r\n
comment4.params=
comment4.target=BinaryTree\ leftTree()
comment4.text=\ Gets\ the\ left\ child\ of\ the\ current\ tree.\r\n\ \ \ \ @return\ the\ left\ child\ (a\ tree)\r\n
comment5.params=
comment5.target=BinaryTree\ rightTree()
comment5.text=\ Gets\ the\ right\ child\ of\ the\ current\ tree.\r\n\ \ \ \ @return\ the\ right\ child\ (a\ tree)\r\n
comment6.params=value
comment6.target=boolean\ add(java.lang.Object)
comment6.text=\ Adds\ elements\ to\ a\ binary\ tree.\ \ This\ implementation\ adds\ the\r\n\ \ \ \ elements\ in\ breadth-first\ (top-down,\ left-to-right)\ order.\r\n\ \ \ \ @param\ value\ the\ value\ to\ be\ added\ to\ the\ tree.\r\n\ \ \ \ @return\ true\ when\ the\ value\ has\ been\ added;\ should\ never\ return\ false\r\n
comment7.params=action
comment7.target=void\ breadthFirstTraversal(NodeVisitor)
comment7.text=\ Traverses\ the\ tree\ in\ breadth-first\ order.\r\n\ \ \ \ @param\ action\ an\ object\ that\ will\ act\ on\ all\ the\ nodes\ in\ the\ tree\r\n
comment8.params=action
comment8.target=void\ preOrderTraversal(NodeVisitor)
comment8.text=\ Traverses\ the\ tree\ in\ pre-order.\r\n\ \ \ \ @param\ action\ an\ object\ that\ will\ act\ on\ all\ the\ nodes\ in\ the\ tree\r\n
comment9.params=action
comment9.target=void\ inOrderTraversal(NodeVisitor)
comment9.text=\ Traverses\ the\ tree\ in\ order.\r\n\ \ \ \ @param\ action\ an\ object\ that\ will\ act\ on\ all\ the\ nodes\ in\ the\ tree\r\n
numComments=17
